/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_BUILDINGS_TERRAIN_CLAMPER_H
#define OSGEARTH_BUILDINGS_TERRAIN_CLAMPER_H

#include "Common"
#include <osgEarth/Map>
#include <osgEarth/MapFrame>
#include <osgEarth/GeoData>
#include <osgEarth/TileKey>
#include <osgEarth/ElevationQuery>
#include <osgEarth/ThreadingUtils>
#include <osgEarthFeatures/Feature>
#include <osgEarthFeatures/Session>
#include <osg/Timer>
#include <map>

namespace osgEarth { namespace Buildings
{
    using namespace osgEarth;
    using namespace osgEarth::Features;

    class TerrainEnvelope;

    /**
     * Shared terrain clamping service.
     */
    class OSGEARTHBUILDINGS_EXPORT TerrainClamper : public osg::Referenced
    {
    public:
        /** ctor */
        TerrainClamper();

        /** Session for clamping (access to the map frame) - required */
        void setSession(Session* session);

        /** Creates a terrain envelope to use for elevation queries in a certain area. */
        TerrainEnvelope* createEnvelope(const GeoExtent& extent, unsigned lod);

        /** Maximum number of elevation tiles to cache */
        void setMaxEntries(unsigned maxEntries) { _maxEntries = maxEntries; }
        unsigned getMaxEntries() const          { return _maxEntries; }


    protected:
        virtual ~TerrainClamper() { }

        MapFrame _frame;

        enum Status
        {
            STATUS_EMPTY = 0u,
            STATUS_IN_PROGRESS = 1u,
            STATUS_AVAILABLE = 2u,
            STATUS_FAIL = 3u
        };

        // a single elevation tile
        struct Tile : public osg::Referenced
        {
            Tile() : _status(STATUS_EMPTY) { }
            Bounds              _bounds;
            GeoHeightField      _hf;
            OpenThreads::Atomic _status;
            osg::Timer_t        _loadTime;
            TileKey             _key;
        };

        // custom comparator for Tile that sorts Tiles in a set from
        // highest resolution to lowest resolution
        struct TileSortHiResToLoRes
        {
            bool operator()(
                const osg::ref_ptr<Tile>& lhs,
                const osg::ref_ptr<Tile>& rhs) const
            {
                // Bug : fix this to be rhs->_key < lhs->_key
                //return lhs->_hf.getExtent().width() < rhs->_hf.getExtent().width();
                return rhs->_key < lhs->_key;
            }
        };

        typedef std::map<TileKey, osg::ref_ptr<Tile> > Tiles;
        typedef std::set<osg::ref_ptr<Tile>, TileSortHiResToLoRes> QuerySet;
        typedef std::list<TileKey> KeyLRU;

        Tiles             _tiles;
        Threading::Mutex  _tilesMutex;
        KeyLRU            _lru;
        unsigned          _entries;
        unsigned          _maxEntries;

        // safely fetch a tile from the central repo, loading from map if necessary
        bool getTile(const TileKey& key, osg::ref_ptr<Tile>& output);

        // safely popluate the tile; called when Tile._status = IN_PROGRESS
        bool fetchTileFromMap(const TileKey& key, Tile* tile);
        
        // given a geospatial extent, build or update a query set that covers it
        bool buildQuerySet(const GeoExtent& extent, unsigned lod, QuerySet& querySet);

        friend class TerrainEnvelope;
    };


    /**s
     * Set of terrain tiles corresponding to a geographic extent that the pager
     * uses to clamp a feature set.
     */
    class OSGEARTHBUILDINGS_EXPORT TerrainEnvelope : public osg::Referenced
    {
    public:
        /** Gets the elevation extrema for a single feature */
        bool getElevationExtrema(const Feature* feature, float& out_min, float& out_max) const;

    protected:
        virtual ~TerrainEnvelope() { }

        TerrainClamper::QuerySet _tiles;
        friend class TerrainClamper;
    };

} } // namespace

#endif // OSGEARTH_BUILDINGS_TERRAIN_CLAMPER_H
