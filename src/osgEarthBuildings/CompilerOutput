/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H
#define OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H

#include "Common"
#include "CompilerSettings"

#include <osg/Geode>
#include <osg/Matrix>
#include <osgEarth/Containers>
#include <osgEarth/Progress>
#include <osgEarthFeatures/Session>
#include <osgEarthFeatures/FeatureIndex>
#include <osgEarthSymbology/ModelResource>

namespace osgEarth { namespace Buildings 
{
    using namespace osgEarth::Features;
    using namespace osgEarth::Symbology;

    /**
     * Object passed to the building compiler that collects all the
     * OSG output generated by the compilation process.
     */
    class OSGEARTHBUILDINGS_EXPORT CompilerOutput
    {
    public:
        CompilerOutput();

        /** Name of this compiler output */
        void setName(const std::string& name) { _name = name; }

        /** Tile key of data that results in this output */
        void setTileKey(const TileKey& key) { _key = key; }

        /** Cache to use for external resources like textures */
        void setArtCache(osgDB::ObjectCache* cache) { _artCache = cache; }

        /** Read output from a cache bin */
        osg::Node* readFromCache(CacheBin* cache, const CachePolicy& policy, ProgressCallback* progress) const;

        /** Write output to a cache bin */
        void writeToCache(osg::Node*, CacheBin* cache, ProgressCallback*) const;

        /** Build and return a scene graph based on the output in this object. */
        osg::Node* createSceneGraph(Session* session, const CompilerSettings& settings, ProgressCallback*) const;

        void setRange(float value) { _range = value; }
        float getRange() const     { return _range; }
        
        /** Delocatization matrix to apply to the entire output. */
        void setLocalToWorld(const osg::Matrix& m);
        const osg::Matrix& getLocalToWorld() const { return _local2world; }
        const osg::Matrix& getWorldToLocal() const { return _world2local; }

        /** Feature index to use (optional) */
        void setIndex(FeatureIndexBuilder* index) { _index = index; }
        FeatureIndexBuilder* getIndex()           { return _index; }

        /** Sets the currently active feature (for indexing purposes). If an index is set,
            calls to addDrawable or addInstance will prompt the indexer to tag the new
            data with this feature. */
        void setCurrentFeature(Feature* f) { _currentFeature = f; }


        void postProcess(osg::Node* node, ProgressCallback* progress) const;

    public:
        
        /** Adds a drawable to the output. */
        void addDrawable(osg::Drawable* drawable);

        /** Adds a drawable, categorized under a tag. */
        void addDrawable(osg::Drawable* drawable, const std::string& tag);

        /** Adds an instance of a model resource */
        void addInstance(ModelResource* model, const osg::Matrix& matrix);

        /** The group containing externally referenced models */
        osg::Group* getExternalModelsGroup() const { return _externalModelsGroup; }

        /** Group holding debugging geometry */
        osg::Group* getDebugGroup() const { return _debugGroup; }

    protected:

        osg::Matrix _local2world, _world2local;

        osg::ref_ptr<osg::Geode> _defaultGeode;
        typedef fast_map<std::string, osg::ref_ptr<osg::Geode> > TaggedGeodes;
        TaggedGeodes _geodes;
        
        typedef std::vector<osg::Matrix> MatrixVector;
        typedef std::map< osg::ref_ptr<ModelResource>, MatrixVector > InstanceMap;
        InstanceMap _instances;
        
        osg::ref_ptr<osg::Group> _externalModelsGroup;

        osg::ref_ptr<osg::Group> _debugGroup;

        FeatureIndexBuilder* _index;

        Feature* _currentFeature;

        float _range;

        TileKey _key;
        std::string _name;
        osg::ref_ptr<osgDB::ObjectCache> _artCache;

        mutable Threading::Mutex _cacheAccessMutex;

        void prepareForCaching(osg::Node*) const;

        std::string createCacheKey() const;
    };
} }

#endif // OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H
