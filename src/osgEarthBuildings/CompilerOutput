/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H
#define OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H

#include "Common"
#include "CompilerSettings"

#include <osg/Geode>
#include <osg/Matrix>
#include <osgEarth/Containers>
#include <osgEarthFeatures/Session>
#include <osgEarthSymbology/ModelResource>

namespace osgEarth { namespace Buildings 
{
    using namespace osgEarth::Features;
    using namespace osgEarth::Symbology;

    /**
     * Object passed to the building compiler that collects all the
     * OSG output generated by the compilation process.
     */
    class OSGEARTHBUILDINGS_EXPORT CompilerOutput
    {
    public:
        CompilerOutput();

        /** Build and return a scene graph based on the output in this object. */
        osg::Node* createSceneGraph(Session* session, const CompilerSettings& settings) const;

        void setRange(float value) { _range = value; }
        float getRange() const     { return _range; }
        
        /** Delocatization matrix to apply to the entire output. */
        void setLocalToWorld(const osg::Matrix& m) { _local2world = m; }
        const osg::Matrix& getLocalToWorld() const { return _local2world; }

    public:
        
        /** Adds a drawable to the output. */
        void addDrawable(osg::Drawable* drawable);

        /** Adds a drawable, categorized under a tag. */
        void addDrawable(osg::Drawable* drawable, const std::string& tag);

        /** Adds an instance of a model resource */
        void addInstance(ModelResource* model, const osg::Matrix& matrix);

        /** The group containing externally referenced models */
        osg::Group* getExternalModelsGroup() const { return _externalModelsGroup; }

        /** Group holding debugging geometry */
        osg::Group* getDebugGroup() const { return _debugGroup; }

    protected:

        osg::Matrix _local2world;

        osg::ref_ptr<osg::Geode> _defaultGeode;
        typedef fast_map<std::string, osg::ref_ptr<osg::Geode> > TaggedGeodes;
        TaggedGeodes _geodes;
        
        typedef std::vector<osg::Matrix> MatrixVector;
        typedef std::map< osg::ref_ptr<ModelResource>, MatrixVector > InstanceMap;
        InstanceMap _instances;
        
        osg::ref_ptr<osg::Group> _externalModelsGroup;

        osg::ref_ptr<osg::Group> _debugGroup;

        float _range;
    };
} }

#endif // OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H
