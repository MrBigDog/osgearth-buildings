/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H
#define OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H

#include "Common"
#include <osg/Geode>
#include <osg/Matrix>
#include <osgEarthFeatures/Session>
#include <osgEarthSymbology/ModelResource>

namespace osgEarth { namespace Buildings 
{
    using namespace osgEarth::Features;
    using namespace osgEarth::Symbology;

    /**
     * Object passed to the building compiler that collects all the
     * OSG output generated by the compilation process.
     */
    class OSGEARTHBUILDINGS_EXPORT CompilerOutput // : public osg::Referenced
    {
    public:
        CompilerOutput();

        void setDetailRange(float value) { _detailRange = value; }
        float getDetailRange() const     { return _detailRange; }

        void setLocalToWorld(const osg::Matrix& m) { _local2world = m; }
        const osg::Matrix& getLocalToWorld() const { return _local2world; }

        osg::Geode* getMainGeode() const { return _mainGeode; }

        osg::Geode* getDetailGeode() const { return _detailGeode; }

        void addInstance(ModelResource* model, const osg::Matrix& matrix);

        osg::Group* getDebugGroup() const { return _debugGroup; }

        osg::Node* createSceneGraph(Session* session) const;

    protected:
        //virtual ~CompilerOutput() { }

        osg::Matrix _local2world;

        osg::ref_ptr<osg::Geode> _mainGeode;
        osg::ref_ptr<osg::Geode> _detailGeode;

        typedef std::vector<osg::Matrix> MatrixVector;
        typedef std::map< osg::ref_ptr<ModelResource>, MatrixVector > ModelPlacementMap;
        ModelPlacementMap _instances;

        osg::ref_ptr<osg::Group> _debugGroup;

        float _detailRange;
    };
} }

#endif // OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H
