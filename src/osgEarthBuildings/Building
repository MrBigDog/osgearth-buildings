/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_BUILDINGS_BUILDING_H
#define OSGEARTH_BUILDINGS_BUILDING_H

#include "Common"
#include "Elevation"
#include "Roof"
#include "Zoning"
#include <vector>
#include <osgEarthSymbology/Geometry>

namespace osgEarth { namespace Buildings 
{
    using namespace osgEarth::Symbology;

    /**
     * Building represents one complete structure, comprised of 
     * at least one elevation and a roof.
     */
    class OSGEARTHBUILDINGS_EXPORT Building : public osg::Referenced
    {
    public:
        /** Construct a new Building */
        Building() { }

        /**
         * Reference frame for all coordinates used to define the building.
         */
        void setReferenceFrame(const osg::Matrix& local2world) { _local2world = local2world; }
        const osg::Matrix& getReferenceFrame() const { return _local2world; }

        /**
         * The polygon footprint of the building. Footprint coordinates expressed
         * relative to the reference frame set for this object.
         */
        void setFootprint(Polygon* footprint) { _footprint = footprint; }
        Polygon* getFootprint() { return _footprint.get(); }

        /**
         * One or more elevations that comprise the facade of the building.
         */
        ElevationVector& getElevations() { return _elevations; }
        const ElevationVector& getElevations() const { return _elevations; }

        /**
         * Roof of the building.
         */
        void setRoof(const Roof& roof) { _roof = roof; }
        const Roof& getRoof() const { return _roof; }

        /**
         * Zoning for this building 
         */
        void setZoning(const Zoning& zoning) { _zoning = zoning; }
        const Zoning& getZoning() const { return _zoning; }

    protected:
        virtual ~Building() { }

        osg::ref_ptr<Polygon>  _footprint;
        ElevationVector        _elevations;
        Roof                   _roof;
        Zoning                 _zoning;
        osg::Matrix            _local2world;
    };

    typedef std::vector< osg::ref_ptr<Building> > BuildingVector;

} }

#endif // OSGEARTH_BUILDINGS_BUILDING_H
