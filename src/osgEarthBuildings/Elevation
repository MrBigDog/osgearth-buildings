/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_BUILDINGS_ELEVATION_H
#define OSGEARTH_BUILDINGS_ELEVATION_H

#include "Common"
#include "Footprint"
#include <osg/Vec3d>
#include <osgEarthSymbology/Skins>
#include <vector>
#include <list>

namespace osgEarth { namespace Buildings
{
    using namespace osgEarth::Symbology;

    /**
     * A vertical section of a building.
     */
    class OSGEARTHBUILDINGS_EXPORT Elevation : public osg::Referenced
    {
    public:
        /** Constructor */
        Elevation();

        /**
         * Sets the height (in meters) of this elevation.
         */
        void setHeight(float height) { _height = height; }
        float getHeight() const      { return _height; }

        /**
         * Skin to use to texture this elevation. (optional)
         */
        void setSkin(SkinResource* skin) { _skin = skin; }
        SkinResource* getSkin() const    { return _skin.get(); }

        /**
         * Builds an internal structure for this elevation. If this returns
         * true, you can then call getWalls() to access the structure.
         */
        bool build(const Footprint* footprint);

        /**
         * Number of floors in this elevation. This value is calculated.
         */
        void setNumFloors(unsigned num) { _numFloors = num; }
        unsigned getNumFloors() const { return _numFloors; }


    public: // structural data model elements

        // A Corner is one vertex in the footprint extruded from bottom to top
        struct Corner
        {
            osg::Vec3d lower, upper;
            float      roofTexU, roofTexV;
            double     offsetX;
            float      wallTexHeightAdjusted;
            bool       isFromSource;
            float      cosAngle;
            float      height;
        };
        typedef std::list<Corner> Corners; // use a list to prevent iterator invalidation

        // A Face joins two Corners.
        struct Face
        {
            Corner left;
            Corner right;
            double widthM;
        };
        typedef std::vector<Face> Faces;

        // A wall is a closed collection of Faces.
        struct Wall
        {
            Faces  faces;
            double texHeightAdjustedM;

            unsigned getNumPoints() const {
                return faces.size() * 6;
            }
        };
        typedef std::vector<Wall> Walls;

        /**
         * The structure of the elevation that was created by buildStructure.
         */
        const Walls& getWalls() const { return _walls; }

    protected:
        float _height;
        unsigned _numFloors;
        osg::ref_ptr<SkinResource> _skin;
        Walls _walls;

    protected:
        virtual ~Elevation() { }
    };

    typedef std::vector< osg::ref_ptr<Elevation> > ElevationVector;

} }

#endif // OSGEARTH_BUILDINGS_ELEVATION_H
